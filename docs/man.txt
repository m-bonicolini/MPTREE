Proxy_sender(1)

NAME
	Proxy_sender Manual

SYNOPSYS
	Proxy_sender --[OPTIONS]
	Proxy_sender [client_listening_port]  [ip1 port1] [ip2 port2]  [ip3 port3]

DESCRIPTION

	Proxy_sender is a C language net utility that communicate with Proxy_receiver. 
	It support multihomed communications with three channels and 
	it is optimized for channels with RTT <= 1 sec. If no option is passed 
	Proxy_sender do listening from port 6001 at ip 127.0.0.1 , and it try to 
	connect to 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003.
	Proxy_sender implement six sending strategy  decretated at compile time.
	For info about strategy see STRATEGY section.

OPTIONS
	If no option is passed Proxy_sender start with default value
	EXAMPLE:
		./Proxy_sender 

	-man  print this man page
	EXAMPLE:
		./Proxy_sender -man

	
	-help print fast help
	EXAMPLE:
		./Proxy_sender -help

	STANDARD:
	   all connections args
	EXAMPLE:
		./Proxy_sender 6001 127.0.0.1 7001 127.0.0.1 7002 127.0.0.1 7003 

PACKET HEADER
		--------------------------------
		|				                |
2 bytes	|	TYPE OF PACKET		        |
		 -------------------------------
		|				                |
2 bytes	|	SERIAL NUMBER		        |
		 -------------------------------
		|				                |
2 bytes |	DATA LENGTH		            |
		 -------------------------------
		|				                |
		|	  DATA 			            |
		|				                |
	
	TYPE OF PACKET:
			DATA : is data packet
			QUIT : is quit packet 
			ACK  : is ack packet
			DATA : is data of packet max data size is 1018
	
	MIN packet size 6 bytes	
	MAX packet size 1024
	
STRATEGY

	The strategy is decretated at compile time by  Proxy_configure. 
	The congestioned value is used to stop reading when 
	communication delay is in the upper bound. Protocol use read_ack() 
	function to increase or dercase packet size in a session and 
	when one packet have RTT > 0.8 sec the ack_lock variable is setted 
	to OFF.

	The default read_ack act like this:

	PACKET(1)----------------------------------------------------->0.2 sec
	0.2 sec <-----------------------------------------------------ACK(2)

	RTT=0.4 sec
	max size of packet is over of 64 bytes. ack_lock for this channel is ON.
	

	PACKET(2) -----------------------------------------------------> 0.5 sec
	0.5 sec	<------------------------------------------------------ACK(2)
	
	RTT=1 sec
	max size is reduced to 64. ack_lock for this channel is OFF
	
	LIST OF SENDING STRATEGY


	SENDA:
		Sending and Reading is not performed only with congestioned value.
		When ack_lock of one channel is OFF(one ack RTT> 0.8sec)
		a new selected speed is setted and ack_lock is restored only when 
		first packet RTT is <  0.9 sec. Permission for writing is global. 
		This strategy is suggested when the network delay is  a periodic 
		and continual function.
		
	SENDB:
        If the RTT delay is  <  0.9 sec ack_lock and write permission for 
        this channel are setted to ON otherwise OFF.
		Congestioned value is divided by 3 when write permission is OFF.
		If all channel are down congestioned value is divided by 27.
		It is a very severe algorithm and it is suggested when the delay 
		can not be described with any type of funtion or when network
		is always congestioned.
	SENDC:
		ack_lock is always setted to ON. Congestioned value is setted when
		RTT is <0.9 sec. For each single channel Write permission is ON 
		or OFF. This strategy can be used for all types of network.
	SENDD:
		read ack is ON  and when RTT <0.8 sec if the current size of packet 
		is < 600 bytes, it is doubled by size. If channel  is fast it is a nice algorithm 
		otherwise no.
	SENDE:
		This strategy is similar to SENDA but read_ack() decrase by 128 byes not 64 bytes.
		Write permission is custom for each channel.
	SENDF:
		This strategy is similar to A but write permission is customized
		

CONFORMING
	This program is a University project and it is not a standard.
	The software is developed to run  with all POSIX 2001 system.
	It is successfull tested on Gentoo Linux pcc32 (ibook G4),
 	on Gentoo linux i686(Pentium III), on Debian i386 lenny(Pentium III)
	on Mac OSX Tiger(10.4) with ppc32 (ibook G4).
BUGS
	The third channel has a low usage.

AUTHORS
    Matteo Bonicolini Alessandro Gentile Dennis Dalla Torre

	The software is commissioned by Vittorio Ghini for Computer Network  
	exam at University of Bologna (Computer Science)
